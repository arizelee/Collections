
public class IntList {
    
private IntNode front; //first node in list
//-----------------------------------------
// Constructor. Initially list is empty.
//-----------------------------------------
public IntList() {
    front = null;
}
//-----------------------------------------
// Adds given integer to front of list.
//-----------------------------------------
public void addToFront(int val) {
    front = new IntNode(val,front);
}
//-----------------------------------------
// Adds given integer to end of list.
//-----------------------------------------
public void addToEnd(int val) {
    IntNode newnode = new IntNode(val,null);
    
    //if list is empty, this will be the only node in it
    if (front == null)
    front = newnode;

    else
    {
      //make temp point to last thing in list
      IntNode temp = front;
      while (temp.next != null)
      temp = temp.next;
      //link new node into list
      temp.next = newnode;
    }
}
//-----------------------------------------
// Removes the first node from the list.
// If the list is empty, does nothing.
//-----------------------------------------
public void removeFirst() {
    if (front != null)
    front = front.next;
}
//------------------------------------------------
// Prints the list elements from first to last.
//------------------------------------------------
public void print() {
    System.out.println("--------------------");
    System.out.print("List elements: ");
    IntNode temp = front;
    while (temp != null)
    {
    System.out.print(temp.val + " ");
    temp = temp.next;
    }
    System.out.println("\n-----------------------\n");
}

//return the number of nodes in the linked list
public int length(){
    
    if (front != null) {
    
    IntNode temp = front;
    int count =1;
    while (temp.next != null) {
        count++;
        temp = temp.next;
    }
    return count;
    }
    
    else return 0;
  }

//returns a string of the linked list's values
public String toString() {
    String result = "List of values:";
    
    if (front == null) result = "The string is empty";
    
    else {
        IntNode temp = front;
        while (temp.next != null) {
            result += " " + temp.val + " ";
            temp = temp.next;
        }
    result = result + temp.val;
    }
        return result; 

}

//removes the last node

public void removeLast(){
    IntNode temp = front;
    if (front == null) { }
    
    if (temp.next == null) {
        front = null;
    }
    else{
        while ((temp.next).next != null) {
            temp = temp.next;
        }
     temp.next = null;
    }
}

//replaces a given value with a specified other 

public void replace(int oldVal, int newVal){
    IntNode temp = front;
    if (front == null) { }
    
    while (temp.next != null) {
       if (temp.val == oldVal) {
           temp.val= newVal;
       }
       temp = temp.next;
    }
    //final if statement ensures that the value at the end of the list is checked also.
      if (temp.val == oldVal) {
        temp.val = newVal;
        }  
    
}

//*************************************************************
// An inner class that represents a node in the integer list.
// The public variables are accessed by the IntList class.
//*************************************************************
private class IntNode {
    public int val; //value stored in node
    public IntNode next; //link to next node in list
    //------------------------------------------------------------------
    // Constructor; sets up the node given a value and IntNode reference
    //------------------------------------------------------------------
    public IntNode(int val, IntNode next)
        {
        this.val = val;
        this.next = next;
        }
    }
}
