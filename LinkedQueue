//This class is the Queue ADT.

//*********************************************************
// QueueADT.java
//*********************************************************
public interface QueueADT
{
//---------------------------------------------
// Puts item on end of queue.
//---------------------------------------------
public void enqueue(Object item);
//---------------------------------------------
// Removes and returns object from front of queue.
//---------------------------------------------
public Object dequeue();
//---------------------------------------------
// Returns true if queue is empty.
//---------------------------------------------
public boolean isEmpty();
//---------------------------------------------
// Returns true if queue is full.
//---------------------------------------------
public boolean isFull();
//---------------------------------------------
// Returns the number of elements in the queue.
//---------------------------------------------
public int size();
}

//This class is the implementation.

//***********************************************************
// LinkedQueue.java
// A linked-list implementation of the classic FIFO queue interface.
//***********************************************************
public class LinkedQueue implements QueueADT {
private Node front, back;
private int numElements;
//---------------------------------------------
// Constructor; initializes the front and back pointers
// and the number of elements.
//---------------------------------------------
public LinkedQueue() {
	front = new Node("S1");
	back = new Node("S2");
	front.setNext(back);
	
}
//---------------------------------------------
// Puts item on end of queue.
//---------------------------------------------
public void enqueue(Object item) {
    Node temp = front;
    Node entry = new Node(item);
    
    while (temp.getNext().getElement() != "S2"){
        temp = temp.getNext(); 
    }
    entry.setNext(back);
    temp.setNext(entry);
    
    numElements++;
}
//---------------------------------------------
// Removes and returns object from front of queue.
//---------------------------------------------
public Object dequeue() {
    Object result;
     if ((front.getNext()).getElement() == "S2") { return null; }
     else {
        result = front.getNext().getElement();
        front.setNext(front.getNext().getNext());
     numElements--;
     return result;
     }
}
//---------------------------------------------
// Returns true if queue is empty.
//---------------------------------------------
public boolean isEmpty() {
    if ((front.getNext()).getElement() == "S2") return true;
    else return false;
}
//---------------------------------------------
// Returns true if queue is full, but it never is.
//---------------------------------------------
public boolean isFull(){
    return false;
}
//---------------------------------------------
// Returns the number of elements in the queue.
//---------------------------------------------
public int size() {
    return numElements;
}
 
//---------------------------------------------
// Returns a string containing the elements of the queue
// from first to last
//---------------------------------------------
public String toString() {

    String result = "\n";
    Node temp = front;
    while (temp != null){
        result += temp.getElement() + "\n";
        temp = temp.getNext();
        }
        return result;
}
}

